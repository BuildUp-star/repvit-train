# 新建环境可选
# conda create -n repvit python=3.10 -y && conda activate repvit
pip install "torch>=2.2" torchvision pillow "timm>=1.0.8" opencv-python

Windows 原生环境安装（不要在 WSL 里装）

# 新建并激活 venv（示例）
py -m venv .venv && .\.venv\Scripts\activate
pip install --upgrade pip
pip install torch-directml  # PyTorch 的 DirectML 设备
pip install timm pillow torchvision  # 你脚本里用到的包


参考：PyTorch-DirectML 官方安装与示例；PyPI 也说明了在 Windows 可用。
Microsoft Learn
+2
PyPI
+2

代码里切到 DirectML 设备
把原来 device = torch.device('cuda' if ... else 'cpu') 一段替换成：

try:
    import torch_directml
    dml_device = torch_directml.device()
    device = dml_device  # DirectML 设备名通常就是 "dml"
    print("Using DirectML (GPU) device")
except Exception as e:
    device = torch.device("cpu")
    print("Falling back to CPU:", e)

model = model.to(device)
# 所有 batch 的张量也要 .to(device)
# example:
# xa, xb, y = xa.to(device), xb.to(device), y.to(device)


import torch import timm 
# 1. 建立同样结构的模型 
model_name = "repvit_m1_0" 
model = timm.create_model(model_name, pretrained=False) 
# 2. 加载权重 
state_dict = torch.load("repvit_m1_0_weights_only.pth", map_location="cpu") 
model.load_state_dict(state_dict) model.eval()


python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --method triplet \
  --model_name repvit_m1_0 \
  --embed_dim 512 \
  --freeze_ratio 0.8 \
  --epochs 10 --batch_size 64 --fp16


python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --method pairs-bce \
  --model_name repvit_m1_0 \
  --embed_dim 512 \
  --freeze_ratio 0.8 \
  --epochs 10 --batch_size 128 --fp16


python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --method triplet \
  --model_name repvit_m1_0 \
  --embed_dim 512 \
  --freeze_ratio 0.8 \
  --batch_size 64 \
  --epochs 20 \
  --fp16 \
  --log_every_sec 10 \
  --patience 0
  
  python train_from_existing_repvit.py   --csv_dir dataset/00train_test   --method pairs-bce   --model_name repvit_m1_0   --embed_dim 512   --freeze_ratio 0.8   --image_size 224   --batch_size 32   --epochs 10   --lr 3e-4   --num_workers 4   --save runs/repvit_embed_512.pt   --save_best runs/repvit_embed_512_best.pt
  
  python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --method pairs-bce \
  --bce_at_tau \
  --tau 0.80 \
  --embed_dim 512 \
  --freeze_ratio 0.8 \
  --image_size 224 \
  --batch_size 64 \
  --epochs 8 \
  --lr 3e-4 \
  --num_workers 4 \
  --save runs/repvit_embed_512.pt \
  --save_best runs/repvit_embed_512_best.pt
  
  python train_from_existing_repvit.py \
  --method pairs-tpp \
  --tau 0.60 \
  --tpp_alpha 10.0 --tpp_pull 0.2 --tpp_push 0.2 --tpp_sigma 0.15 \
  --pos_weight 2.0      
  
  # 例如负样本≈正样本两倍
  
  
# 相似度调试：读取CSV并分析分布，打印最难正/负例各20对，并把配对相似度导出到CSV
python debug_sims.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test \
  --topk 20 \
  --save_csv runs/sims_debug.csv


# 打印所有“异组且余弦相似度 > 0.7”的配对，仅在屏幕显示
python print_high_neg_pairs.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test \
  --threshold 0.7

# 同上，但加载你微调后的权重（更贴近训练后的实际表现）
python print_high_neg_pairs.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test \
  --checkpoint runs/repvit_embed_512_best.pt \
  --threshold 0.7


# 将命中的高相似“负例”配对写入CSV，并限制屏幕打印数量避免刷屏
python print_high_neg_pairs.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test \
  --threshold 0.7 \
  --save_csv runs/high_neg_pairs.csv \
  --max_print 200

# pair 对数。 把结果重定向保存到文本文件（可选）
python count_pairs.py --csv dataset/00train_test/test.csv > runs/pair_count_test.txt

直接打印全部 POS 分数
python print_pos_pairs.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test
  # 用你训练后的权重、按分数从高到低排序打印
python print_pos_pairs.py \
  --csv dataset/00train_test/test.csv \
  --base_dir dataset/00train_test \
  --checkpoint runs/repvit_embed_512_best.pt \
  --sort desc

# 保存到 CSV（全部 POS pair 都会写入），并限制屏幕打印条数
python print_pos_pairs.py \
  --csv dataset/00train_test/test.csv \
  --sort desc\
  --base_dir dataset/00train_test \
  --save_csv runs/pos_pairs_sorted.csv \
  --max_print 500
  
@train with supcon loss  
  python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --method supcon \
  --model_name repvit_m1_0 \
  --embed_dim 512 \
  --mlp_head \
  --freeze_ratio 0.8 \
  --batch_size 64 \
  --epochs 10 \
  --lr 3e-4 \
  --image_size 224 \
  --temperature 0.1 \
  --fp16
  
#create dataset for supcon. (probably have done this script already)
 python make_supcon_csv.py   --roots ./corridor ./home ./market ./office ./restaurant ./station   --out_dir .   --train_ratio 0.8   --seed 42
 
 
 #test inital F1 score
 python train_from_existing_repvit.py \
  --csv_dir dataset/00train_test \
  --model_name repvit_m1_0 \
  --eval_init_train --only_eval_init_train
  
  --load runs/repvit_supcon_best.pt \